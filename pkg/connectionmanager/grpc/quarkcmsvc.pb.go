//
//Copyright 2022 quarkcm Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.15.8
// source: pkg/connectionmanager/grpc/quarkcmsvc.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientName string `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
}

func (x *TestRequestMessage) Reset() {
	*x = TestRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRequestMessage) ProtoMessage() {}

func (x *TestRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRequestMessage.ProtoReflect.Descriptor instead.
func (*TestRequestMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{0}
}

func (x *TestRequestMessage) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

type TestResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName string `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
}

func (x *TestResponseMessage) Reset() {
	*x = TestResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResponseMessage) ProtoMessage() {}

func (x *TestResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResponseMessage.ProtoReflect.Descriptor instead.
func (*TestResponseMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{1}
}

func (x *TestResponseMessage) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

type NodeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hostname          string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip                uint32 `protobuf:"varint,3,opt,name=ip,proto3" json:"ip,omitempty"`
	CreationTimestamp uint64 `protobuf:"varint,4,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	ResourceVersion   int32  `protobuf:"varint,5,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	Subnet            uint32 `protobuf:"varint,6,opt,name=subnet,proto3" json:"subnet,omitempty"`
	NetMask           uint32 `protobuf:"varint,7,opt,name=net_mask,json=netMask,proto3" json:"net_mask,omitempty"`
	EventType         string `protobuf:"bytes,8,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
}

func (x *NodeMessage) Reset() {
	*x = NodeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMessage) ProtoMessage() {}

func (x *NodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMessage.ProtoReflect.Descriptor instead.
func (*NodeMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{2}
}

func (x *NodeMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeMessage) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NodeMessage) GetIp() uint32 {
	if x != nil {
		return x.Ip
	}
	return 0
}

func (x *NodeMessage) GetCreationTimestamp() uint64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *NodeMessage) GetResourceVersion() int32 {
	if x != nil {
		return x.ResourceVersion
	}
	return 0
}

func (x *NodeMessage) GetSubnet() uint32 {
	if x != nil {
		return x.Subnet
	}
	return 0
}

func (x *NodeMessage) GetNetMask() uint32 {
	if x != nil {
		return x.NetMask
	}
	return 0
}

func (x *NodeMessage) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

type NodeListMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*NodeMessage `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *NodeListMessage) Reset() {
	*x = NodeListMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeListMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeListMessage) ProtoMessage() {}

func (x *NodeListMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeListMessage.ProtoReflect.Descriptor instead.
func (*NodeListMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{3}
}

func (x *NodeListMessage) GetNodes() []*NodeMessage {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type PodMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Ip              uint32 `protobuf:"varint,2,opt,name=ip,proto3" json:"ip,omitempty"`
	NodeName        string `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ContainerId     string `protobuf:"bytes,4,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ResourceVersion int32  `protobuf:"varint,5,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	EventType       string `protobuf:"bytes,6,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
}

func (x *PodMessage) Reset() {
	*x = PodMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodMessage) ProtoMessage() {}

func (x *PodMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodMessage.ProtoReflect.Descriptor instead.
func (*PodMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{4}
}

func (x *PodMessage) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PodMessage) GetIp() uint32 {
	if x != nil {
		return x.Ip
	}
	return 0
}

func (x *PodMessage) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *PodMessage) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *PodMessage) GetResourceVersion() int32 {
	if x != nil {
		return x.ResourceVersion
	}
	return 0
}

func (x *PodMessage) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

type PodListMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods []*PodMessage `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (x *PodListMessage) Reset() {
	*x = PodListMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodListMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodListMessage) ProtoMessage() {}

func (x *PodListMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodListMessage.ProtoReflect.Descriptor instead.
func (*PodListMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{5}
}

func (x *PodListMessage) GetPods() []*PodMessage {
	if x != nil {
		return x.Pods
	}
	return nil
}

type ServiceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ClusterIp       uint32   `protobuf:"varint,2,opt,name=cluster_ip,json=clusterIp,proto3" json:"cluster_ip,omitempty"`
	Ports           []string `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
	ResourceVersion int32    `protobuf:"varint,4,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	EventType       string   `protobuf:"bytes,5,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
}

func (x *ServiceMessage) Reset() {
	*x = ServiceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMessage) ProtoMessage() {}

func (x *ServiceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMessage.ProtoReflect.Descriptor instead.
func (*ServiceMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{6}
}

func (x *ServiceMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceMessage) GetClusterIp() uint32 {
	if x != nil {
		return x.ClusterIp
	}
	return 0
}

func (x *ServiceMessage) GetPorts() []string {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ServiceMessage) GetResourceVersion() int32 {
	if x != nil {
		return x.ResourceVersion
	}
	return 0
}

func (x *ServiceMessage) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

type ServiceListMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []*ServiceMessage `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *ServiceListMessage) Reset() {
	*x = ServiceListMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceListMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceListMessage) ProtoMessage() {}

func (x *ServiceListMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceListMessage.ProtoReflect.Descriptor instead.
func (*ServiceListMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceListMessage) GetServices() []*ServiceMessage {
	if x != nil {
		return x.Services
	}
	return nil
}

type EndpointsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IpWithPorts     []string `protobuf:"bytes,2,rep,name=ip_with_ports,json=ipWithPorts,proto3" json:"ip_with_ports,omitempty"`
	ResourceVersion int32    `protobuf:"varint,3,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	EventType       string   `protobuf:"bytes,4,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
}

func (x *EndpointsMessage) Reset() {
	*x = EndpointsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointsMessage) ProtoMessage() {}

func (x *EndpointsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointsMessage.ProtoReflect.Descriptor instead.
func (*EndpointsMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{8}
}

func (x *EndpointsMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EndpointsMessage) GetIpWithPorts() []string {
	if x != nil {
		return x.IpWithPorts
	}
	return nil
}

func (x *EndpointsMessage) GetResourceVersion() int32 {
	if x != nil {
		return x.ResourceVersion
	}
	return 0
}

func (x *EndpointsMessage) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

type EndpointsListMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpointses []*EndpointsMessage `protobuf:"bytes,1,rep,name=Endpointses,proto3" json:"Endpointses,omitempty"`
}

func (x *EndpointsListMessage) Reset() {
	*x = EndpointsListMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointsListMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointsListMessage) ProtoMessage() {}

func (x *EndpointsListMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointsListMessage.ProtoReflect.Descriptor instead.
func (*EndpointsListMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{9}
}

func (x *EndpointsListMessage) GetEndpointses() []*EndpointsMessage {
	if x != nil {
		return x.Endpointses
	}
	return nil
}

type ConfigMapMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value           string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ResourceVersion int32  `protobuf:"varint,3,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	EventType       string `protobuf:"bytes,4,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
}

func (x *ConfigMapMessage) Reset() {
	*x = ConfigMapMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMapMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapMessage) ProtoMessage() {}

func (x *ConfigMapMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapMessage.ProtoReflect.Descriptor instead.
func (*ConfigMapMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{10}
}

func (x *ConfigMapMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigMapMessage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ConfigMapMessage) GetResourceVersion() int32 {
	if x != nil {
		return x.ResourceVersion
	}
	return 0
}

func (x *ConfigMapMessage) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

type ConfigMapListMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigMaps []*ConfigMapMessage `protobuf:"bytes,1,rep,name=ConfigMaps,proto3" json:"ConfigMaps,omitempty"`
}

func (x *ConfigMapListMessage) Reset() {
	*x = ConfigMapListMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMapListMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapListMessage) ProtoMessage() {}

func (x *ConfigMapListMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapListMessage.ProtoReflect.Descriptor instead.
func (*ConfigMapListMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{11}
}

func (x *ConfigMapListMessage) GetConfigMaps() []*ConfigMapMessage {
	if x != nil {
		return x.ConfigMaps
	}
	return nil
}

type IngressMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Service         string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	PortNumber      uint32 `protobuf:"varint,3,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`
	ResourceVersion int32  `protobuf:"varint,4,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	EventType       string `protobuf:"bytes,5,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
}

func (x *IngressMessage) Reset() {
	*x = IngressMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressMessage) ProtoMessage() {}

func (x *IngressMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressMessage.ProtoReflect.Descriptor instead.
func (*IngressMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{12}
}

func (x *IngressMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IngressMessage) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *IngressMessage) GetPortNumber() uint32 {
	if x != nil {
		return x.PortNumber
	}
	return 0
}

func (x *IngressMessage) GetResourceVersion() int32 {
	if x != nil {
		return x.ResourceVersion
	}
	return 0
}

func (x *IngressMessage) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

type IngressListMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ingresses []*IngressMessage `protobuf:"bytes,1,rep,name=Ingresses,proto3" json:"Ingresses,omitempty"`
}

func (x *IngressListMessage) Reset() {
	*x = IngressListMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressListMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressListMessage) ProtoMessage() {}

func (x *IngressListMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressListMessage.ProtoReflect.Descriptor instead.
func (*IngressListMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{13}
}

func (x *IngressListMessage) GetIngresses() []*IngressMessage {
	if x != nil {
		return x.Ingresses
	}
	return nil
}

type MaxResourceVersionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxResourceVersion int32 `protobuf:"varint,1,opt,name=max_resource_version,json=maxResourceVersion,proto3" json:"max_resource_version,omitempty"`
}

func (x *MaxResourceVersionMessage) Reset() {
	*x = MaxResourceVersionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxResourceVersionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxResourceVersionMessage) ProtoMessage() {}

func (x *MaxResourceVersionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxResourceVersionMessage.ProtoReflect.Descriptor instead.
func (*MaxResourceVersionMessage) Descriptor() ([]byte, []int) {
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP(), []int{14}
}

func (x *MaxResourceVersionMessage) GetMaxResourceVersion() int32 {
	if x != nil {
		return x.MaxResourceVersion
	}
	return 0
}

var File_pkg_connectionmanager_grpc_quarkcmsvc_proto protoreflect.FileDescriptor

var file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x71, 0x75, 0x61,
	0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x71,
	0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a,
	0x13, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x40, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3c,
	0x0a, 0x0e, 0x50, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x50, 0x6f, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x22, 0xa3, 0x01, 0x0a,
	0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x4c, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71, 0x75, 0x61,
	0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x94, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x70, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x14, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3e, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76,
	0x63, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x65, 0x73, 0x22,
	0x86, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x22, 0xa9,
	0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4e, 0x0a, 0x12, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63,
	0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x09, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x19, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x93, 0x08, 0x0a, 0x0e, 0x51, 0x75,
	0x61, 0x72, 0x6b, 0x43, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x08,
	0x54, 0x65, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b,
	0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b,
	0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1b, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x71, 0x75,
	0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x17, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x3f, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e,
	0x50, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x08, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x64, 0x12, 0x25, 0x2e, 0x71,
	0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63,
	0x2e, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x47, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d,
	0x73, 0x76, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b,
	0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x1a, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x4b, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b,
	0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x25,
	0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73,
	0x76, 0x63, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x20, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x25, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d,
	0x73, 0x76, 0x63, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e,
	0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x47, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d,
	0x73, 0x76, 0x63, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b,
	0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x1a, 0x2e, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x63, 0x6d, 0x73, 0x76, 0x63, 0x2e, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42,
	0x0a, 0x5a, 0x08, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescOnce sync.Once
	file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescData = file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDesc
)

func file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescGZIP() []byte {
	file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescOnce.Do(func() {
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescData)
	})
	return file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDescData
}

var file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_pkg_connectionmanager_grpc_quarkcmsvc_proto_goTypes = []interface{}{
	(*TestRequestMessage)(nil),        // 0: quarkcmsvc.TestRequestMessage
	(*TestResponseMessage)(nil),       // 1: quarkcmsvc.TestResponseMessage
	(*NodeMessage)(nil),               // 2: quarkcmsvc.NodeMessage
	(*NodeListMessage)(nil),           // 3: quarkcmsvc.NodeListMessage
	(*PodMessage)(nil),                // 4: quarkcmsvc.PodMessage
	(*PodListMessage)(nil),            // 5: quarkcmsvc.PodListMessage
	(*ServiceMessage)(nil),            // 6: quarkcmsvc.ServiceMessage
	(*ServiceListMessage)(nil),        // 7: quarkcmsvc.ServiceListMessage
	(*EndpointsMessage)(nil),          // 8: quarkcmsvc.EndpointsMessage
	(*EndpointsListMessage)(nil),      // 9: quarkcmsvc.EndpointsListMessage
	(*ConfigMapMessage)(nil),          // 10: quarkcmsvc.ConfigMapMessage
	(*ConfigMapListMessage)(nil),      // 11: quarkcmsvc.ConfigMapListMessage
	(*IngressMessage)(nil),            // 12: quarkcmsvc.IngressMessage
	(*IngressListMessage)(nil),        // 13: quarkcmsvc.IngressListMessage
	(*MaxResourceVersionMessage)(nil), // 14: quarkcmsvc.MaxResourceVersionMessage
	(*emptypb.Empty)(nil),             // 15: google.protobuf.Empty
}
var file_pkg_connectionmanager_grpc_quarkcmsvc_proto_depIdxs = []int32{
	2,  // 0: quarkcmsvc.NodeListMessage.nodes:type_name -> quarkcmsvc.NodeMessage
	4,  // 1: quarkcmsvc.PodListMessage.pods:type_name -> quarkcmsvc.PodMessage
	6,  // 2: quarkcmsvc.ServiceListMessage.services:type_name -> quarkcmsvc.ServiceMessage
	8,  // 3: quarkcmsvc.EndpointsListMessage.Endpointses:type_name -> quarkcmsvc.EndpointsMessage
	10, // 4: quarkcmsvc.ConfigMapListMessage.ConfigMaps:type_name -> quarkcmsvc.ConfigMapMessage
	12, // 5: quarkcmsvc.IngressListMessage.Ingresses:type_name -> quarkcmsvc.IngressMessage
	0,  // 6: quarkcmsvc.QuarkCMService.TestPing:input_type -> quarkcmsvc.TestRequestMessage
	15, // 7: quarkcmsvc.QuarkCMService.ListNode:input_type -> google.protobuf.Empty
	14, // 8: quarkcmsvc.QuarkCMService.WatchNode:input_type -> quarkcmsvc.MaxResourceVersionMessage
	15, // 9: quarkcmsvc.QuarkCMService.ListPod:input_type -> google.protobuf.Empty
	14, // 10: quarkcmsvc.QuarkCMService.WatchPod:input_type -> quarkcmsvc.MaxResourceVersionMessage
	15, // 11: quarkcmsvc.QuarkCMService.ListService:input_type -> google.protobuf.Empty
	14, // 12: quarkcmsvc.QuarkCMService.WatchService:input_type -> quarkcmsvc.MaxResourceVersionMessage
	15, // 13: quarkcmsvc.QuarkCMService.ListEndpoints:input_type -> google.protobuf.Empty
	14, // 14: quarkcmsvc.QuarkCMService.WatchEndpoints:input_type -> quarkcmsvc.MaxResourceVersionMessage
	15, // 15: quarkcmsvc.QuarkCMService.ListConfigMap:input_type -> google.protobuf.Empty
	14, // 16: quarkcmsvc.QuarkCMService.WatchConfigMap:input_type -> quarkcmsvc.MaxResourceVersionMessage
	15, // 17: quarkcmsvc.QuarkCMService.ListIngress:input_type -> google.protobuf.Empty
	14, // 18: quarkcmsvc.QuarkCMService.WatchIngress:input_type -> quarkcmsvc.MaxResourceVersionMessage
	1,  // 19: quarkcmsvc.QuarkCMService.TestPing:output_type -> quarkcmsvc.TestResponseMessage
	3,  // 20: quarkcmsvc.QuarkCMService.ListNode:output_type -> quarkcmsvc.NodeListMessage
	2,  // 21: quarkcmsvc.QuarkCMService.WatchNode:output_type -> quarkcmsvc.NodeMessage
	5,  // 22: quarkcmsvc.QuarkCMService.ListPod:output_type -> quarkcmsvc.PodListMessage
	4,  // 23: quarkcmsvc.QuarkCMService.WatchPod:output_type -> quarkcmsvc.PodMessage
	7,  // 24: quarkcmsvc.QuarkCMService.ListService:output_type -> quarkcmsvc.ServiceListMessage
	6,  // 25: quarkcmsvc.QuarkCMService.WatchService:output_type -> quarkcmsvc.ServiceMessage
	9,  // 26: quarkcmsvc.QuarkCMService.ListEndpoints:output_type -> quarkcmsvc.EndpointsListMessage
	8,  // 27: quarkcmsvc.QuarkCMService.WatchEndpoints:output_type -> quarkcmsvc.EndpointsMessage
	11, // 28: quarkcmsvc.QuarkCMService.ListConfigMap:output_type -> quarkcmsvc.ConfigMapListMessage
	10, // 29: quarkcmsvc.QuarkCMService.WatchConfigMap:output_type -> quarkcmsvc.ConfigMapMessage
	13, // 30: quarkcmsvc.QuarkCMService.ListIngress:output_type -> quarkcmsvc.IngressListMessage
	12, // 31: quarkcmsvc.QuarkCMService.WatchIngress:output_type -> quarkcmsvc.IngressMessage
	19, // [19:32] is the sub-list for method output_type
	6,  // [6:19] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_pkg_connectionmanager_grpc_quarkcmsvc_proto_init() }
func file_pkg_connectionmanager_grpc_quarkcmsvc_proto_init() {
	if File_pkg_connectionmanager_grpc_quarkcmsvc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeListMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodListMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceListMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointsListMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMapMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMapListMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressListMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxResourceVersionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_connectionmanager_grpc_quarkcmsvc_proto_goTypes,
		DependencyIndexes: file_pkg_connectionmanager_grpc_quarkcmsvc_proto_depIdxs,
		MessageInfos:      file_pkg_connectionmanager_grpc_quarkcmsvc_proto_msgTypes,
	}.Build()
	File_pkg_connectionmanager_grpc_quarkcmsvc_proto = out.File
	file_pkg_connectionmanager_grpc_quarkcmsvc_proto_rawDesc = nil
	file_pkg_connectionmanager_grpc_quarkcmsvc_proto_goTypes = nil
	file_pkg_connectionmanager_grpc_quarkcmsvc_proto_depIdxs = nil
}
